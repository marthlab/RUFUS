#!/bin/bash

# parse command line arguments
REFERENCE_FILE=$0  # Reference file (.fa)
RUFUS_VCF=$1       # The 'FINAL' vcf generated by rufus, to be isec'd
SAMPLE_NAME=$2     # Sample name, used in vcf output file name
ARG_LIST=("$@")
CONTROL_BAM_LIST=("${ARG_LIST[@]:3}")

# static vars
OUT_VCF="$SAMPLE_NAME.FINAL.intersected.vcf.gz"
CONTROL_VCF="isec_control.vcf.gz"

# make intersection directory
ISEC_OUT_DIR="temp_isecs"
mkdir "${ISEC_OUT_DIR}"

#format final rufus vcf for intersections
vt normalize -n -r $REFERENCE_FILE $RUFUS_VCF -| vt decompose_blocksub - | bgzip > $OUT_VCF
bcftools index -r $OUT_VCF

#for loop for each control file provided by user
for CONTROL in "${CONTROL_BAM_LIST[@]}"; do
    MADE_ALIGN_CONTROL=false
    
    #check to see if the provided bam file is aligned
    if [ "$(samtools view -H "$CONTROL" | grep -c '^@SQ')" -gt 0 ]; then
        CONTROL_BAM=$CONTROL
    else
        bwa mem -t 40 $REFERENCE_FILE $CONTROL | samtools view -S -@ 12 -b - > "aligned.$CONTROL"
        CONTROL_BAM=$CONTROL_ALIGNED
	    MADE_ALIGN_CONTROL=true
    fi
    
    #run pileup and call variants
    bcftools mpileup -Oz -d600 -f $REFERENCE_FILE -T $OUT_VCF $CONTROL_BAM - | bcftools call -Oz -v > $CONTROL_VCF
    bcftools index -t $CONTROL_VCF
    	
    #intersect the control vcf with formatted rufus vcf
    bcftools isec -Oz -w1 -n=1 -p $ISEC_OUT_DIR $OUT_VCF $CONTROL_VCF
        
    # save the new vcf as rufus final vcf
	OUTFILE=$ISEC_OUT_DIR/0000.vcf.gz

    # clean up aligned control file, if it exists
	if [ "$MADE_CONTROL_BAM" = true ]; then
    	rm "aligned.$CONTROL"
	fi
done

# Clean up files
rm -rf $ISEC_OUT_DIR
rm $CONTROL_VCF
